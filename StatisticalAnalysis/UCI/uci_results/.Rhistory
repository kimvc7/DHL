data_acc = data.frame(acc_domain, acc_images)
#HDL
HDL_acc_images = sapply(acc_domain, HDL_acc_requirement)
data_HDL_acc = data.frame(acc_domain, HDL_acc_images)
HDL_robust_images = sapply(robust_domain, HDL_robust_requirement)
data_HDL_robust = data.frame(robust_domain, HDL_robust_images)
HDL_stable_images = sapply(stable_domain, HDL_stable_requirement)
data_HDL_stable = data.frame(stable_domain, HDL_stable_images)
HDL_sparse_images = sapply(sparse_domain, HDL_sparse_requirement)
data_HDL_sparse = data.frame(sparse_domain, HDL_sparse_images)
avg_ratio = mean(pareto$robust =0.01)
ggplot(data =data_robust,  aes(x = robust_domain, y = robust_images)) +
xlab("Average Adversarial Accuracy") + ylab("Percentage of Networks Trained with Robustness") +
geom_ribbon(aes(ymin=avg_ratio, ymax=pmax(avg_ratio, robust_images)),fill= "#56B4E9") +
geom_ribbon(aes(ymin=pmin(avg_ratio, robust_images), ymax=avg_ratio),fill= "#FF9999") +
geom_hline(yintercept=avg_ratio) + theme_minimal()+
scale_y_continuous(labels = scales::percent_format(accuracy = 1))
avg_ratio = mean(pareto$robust ==0.01)
ggplot(data =data_robust,  aes(x = robust_domain, y = robust_images)) +
xlab("Average Adversarial Accuracy") + ylab("Percentage of Networks Trained with Robustness") +
geom_ribbon(aes(ymin=avg_ratio, ymax=pmax(avg_ratio, robust_images)),fill= "#56B4E9") +
geom_ribbon(aes(ymin=pmin(avg_ratio, robust_images), ymax=avg_ratio),fill= "#FF9999") +
geom_hline(yintercept=avg_ratio) + theme_minimal()+
scale_y_continuous(labels = scales::percent_format(accuracy = 1))
robust_images
f
robust_requirement = function(x){df = subset(pareto, pareto$`0.01` >= x); return(sum(df$robust==0.01)/nrow(df))}
sparse_requirement = function(x){df = subset(pareto, pareto$sparsity <= x); return(sum(df$sparse==TRUE)/nrow(df))}
stable_requirement = function(x){df = subset(pareto, pareto$avg_logit_stability <= x); return(sum(df$stable==1)/nrow(df))}
robust.stable_requirement = function(x){df = subset(pareto, pareto$avg_test_acc >= x); return(sum(df$robust==0.01 & df$sparse==FALSE & df$stable==1)/nrow(df))}
HDL_acc_requirement = function(x){df = subset(pareto, pareto$avg_test_acc >= x); return(sum(df$robust==0.01 & df$sparse==TRUE & df$stable==1)/nrow(df))}
HDL_sparse_requirement = function(x){df = subset(pareto, pareto$sparsity <= x); return(sum(df$robust==0.01 & df$sparse==TRUE & df$stable==1)/nrow(df))}
HDL_stable_requirement = function(x){df = subset(pareto, pareto$avg_logit_stability <= x); return(sum(df$robust==0.01 & df$sparse==TRUE & df$stable==1)/nrow(df))}
HDL_robust_requirement = function(x){df = subset(pareto, pareto$`0.01` >= x); return(sum(df$robust==0.01 & df$sparse==TRUE & df$stable==1)/nrow(df))}
robust_M = max(pareto$`0.01`)
robust_m = min(pareto$`0.01`)
robust_domain = robust_m + (1:500)*((robust_M - robust_m)/500)
robust_images = sapply(robust_domain, robust_requirement)
plot(robust_domain, robust_images)
data_robust = data.frame(robust_domain, robust_images)
stable_M = max(pareto$avg_logit_stability)
stable_m = min(pareto$avg_logit_stability)
stable_domain = stable_m + (1:500)*((stable_M - stable_m)/500)
stable_images = sapply(stable_domain, stable_requirement)
plot(stable_domain, stable_images)
data_stable = data.frame(stable_domain, stable_images)
sparse_M = max(pareto$sparsity)
sparse_m = min(pareto$sparsity)
sparse_domain = sparse_m + (1:500)*((sparse_M - sparse_m)/500)
sparse_images = sapply(sparse_domain, sparse_requirement)
plot(sparse_domain, sparse_images)
data_sparse = data.frame(stable_domain, stable_images)
acc_M = max(pareto$avg_test_acc)
acc_m = min(pareto$avg_test_acc)
acc_domain = acc_m + (1:500)*((acc_M - acc_m)/500)
acc_images = sapply(acc_domain, robust.stable_requirement)
plot(acc_domain, acc_images)
data_acc = data.frame(acc_domain, acc_images)
#HDL
HDL_acc_images = sapply(acc_domain, HDL_acc_requirement)
data_HDL_acc = data.frame(acc_domain, HDL_acc_images)
HDL_robust_images = sapply(robust_domain, HDL_robust_requirement)
data_HDL_robust = data.frame(robust_domain, HDL_robust_images)
HDL_stable_images = sapply(stable_domain, HDL_stable_requirement)
data_HDL_stable = data.frame(stable_domain, HDL_stable_images)
HDL_sparse_images = sapply(sparse_domain, HDL_sparse_requirement)
data_HDL_sparse = data.frame(sparse_domain, HDL_sparse_images)
avg_ratio = mean(pareto$robust ==0.01)
ggplot(data =data_robust,  aes(x = robust_domain, y = robust_images)) +
xlab("Average Adversarial Accuracy") + ylab("Percentage of Networks Trained with Robustness") +
geom_ribbon(aes(ymin=avg_ratio, ymax=pmax(avg_ratio, robust_images)),fill= "#56B4E9") +
geom_ribbon(aes(ymin=pmin(avg_ratio, robust_images), ymax=avg_ratio),fill= "#FF9999") +
geom_hline(yintercept=avg_ratio) + theme_minimal()+
scale_y_continuous(labels = scales::percent_format(accuracy = 1))
data = read_csv("results_ffcifar_michael.csv", col_names = c("stable","robust","robust_test","n_experiments",
"train_size","batch_size","subset_ratio","avg_test_acc","dict_test_accs","adv_test_accs","std",
"thetas","num_training_steps","iterations","w1_stability","w2_stability","w3_stability","logit_stability",
"gini_stability","l2","l0","W1_non_zero","W2_non_zero","W3_non_zero","l1_size","l2_size","lr","adv_acc0",
"adv_acc1","adv_acc2","adv_acc3","adv_acc4","adv_acc5"))
data2 = read_csv("results_ffcifar_leonard.csv", col_names = c("stable","robust","robust_test","n_experiments",
"train_size","batch_size","subset_ratio","avg_test_acc","dict_test_accs","adv_test_accs","std",
"thetas","num_training_steps","iterations","w1_stability","w2_stability","w3_stability","logit_stability",
"gini_stability","l2","l0","W1_non_zero","W2_non_zero","W3_non_zero","l1_size","l2_size","lr","adv_acc0",
"adv_acc1","adv_acc2","adv_acc3","adv_acc4","adv_acc5"))
data3 = read_csv("results_ffcifar_kim.csv", col_names = c("stable","robust","robust_test","n_experiments",
"train_size","batch_size","subset_ratio","avg_test_acc","dict_test_accs","adv_test_accs","std",
"thetas","num_training_steps","iterations","w1_stability","w2_stability","w3_stability","logit_stability",
"gini_stability","l2","l0","W1_non_zero","W2_non_zero","W3_non_zero","l1_size","l2_size","lr","adv_acc0",
"adv_acc1","adv_acc2","adv_acc3","adv_acc4","adv_acc5"))
data4 = read_csv("results_ffcifar_ivan.csv", col_names = c("stable","robust","robust_test","n_experiments",
"train_size","batch_size","subset_ratio","avg_test_acc","dict_test_accs","adv_test_accs","std",
"thetas","num_training_steps","iterations","w1_stability","w2_stability","w3_stability","logit_stability",
"gini_stability","l2","l0","W1_non_zero","W2_non_zero","W3_non_zero","l1_size","l2_size","lr","adv_acc0",
"adv_acc1","adv_acc2","adv_acc3","adv_acc4","adv_acc5"))
data5 = read_csv("results_ffcifar_alex.csv", col_names = c("stable","robust","robust_test","n_experiments",
"train_size","batch_size","subset_ratio","avg_test_acc","dict_test_accs","adv_test_accs","std",
"thetas","num_training_steps","iterations","w1_stability","w2_stability","w3_stability","logit_stability",
"gini_stability","l2","l0","W1_non_zero","W2_non_zero","W3_non_zero","l1_size","l2_size","lr","adv_acc0",
"adv_acc1","adv_acc2","adv_acc3","adv_acc4","adv_acc5"))
data_total = rbind(rbind(rbind(rbind(data,data2),data3),data4),data5)
dataset_name = "cifar"
# the single most frankenstein line of code Michael has written in R so far
regex_result = apply(do.call(rbind,lapply(gsub("\\s+"," ",str_replace_all(data_total$adv_test_accs, "(array\\(|\\)|\n|\r\n)",  "")),
yaml.load)),c(1,2),function(x) mean(x[[1]]))
data_total = cbind(data_total,regex_result)
avg_logit_stability = sapply(strsplit(str_sub(data_total$logit_stability, start=2, end = -2),"\\s+|\n"),function(x) mean(as.numeric(x)) )
data_total = cbind(data_total,avg_logit_stability)
data_total$stable = factor(data_total$stable)
data_total$robustness = log(data_total$robust+1e-06)/max(abs(log(data_total$robust+1e-06))) + 1
data_total$lr = factor(data_total$lr)
data_total$l2_reg = log(data_total$l2+1e-06)/max(abs(log(data_total$l2+1e-06))) + 1
data_total$sparsity = (data_total$W1_non_zero +  data_total$W2_non_zero + data_total$W3_non_zero) / 3
data_total$l0_reg = log(data_total$l0+1e-06)/max(abs(log(data_total$l0+1e-06))) + 1
#Find points in the Pareto Frontier
data_total$ID <- seq.int(nrow(data_total))
data_total$sparse <- as.factor(data_total$l0_reg != 0)
pareto <- psel(data_total, high(avg_test_acc) * high(`0.01`)  * low(avg_logit_stability) * low(sparsity))
data_total$Pareto <- (data_total$ID %in% pareto$ID)
data_total$Pareto = as.factor(data_total$Pareto)
robust_requirement = function(x){df = subset(pareto, pareto$`0.01` >= x); return(sum(df$robust==0.01)/nrow(df))}
sparse_requirement = function(x){df = subset(pareto, pareto$sparsity <= x); return(sum(df$sparse==TRUE)/nrow(df))}
stable_requirement = function(x){df = subset(pareto, pareto$avg_logit_stability <= x); return(sum(df$stable==1)/nrow(df))}
robust.stable_requirement = function(x){df = subset(pareto, pareto$avg_test_acc >= x); return(sum(df$robust==0.01 & df$sparse==FALSE & df$stable==1)/nrow(df))}
HDL_acc_requirement = function(x){df = subset(pareto, pareto$avg_test_acc >= x); return(sum(df$robust==0.01 & df$sparse==TRUE & df$stable==1)/nrow(df))}
HDL_sparse_requirement = function(x){df = subset(pareto, pareto$sparsity <= x); return(sum(df$robust==0.01 & df$sparse==TRUE & df$stable==1)/nrow(df))}
HDL_stable_requirement = function(x){df = subset(pareto, pareto$avg_logit_stability <= x); return(sum(df$robust==0.01 & df$sparse==TRUE & df$stable==1)/nrow(df))}
HDL_robust_requirement = function(x){df = subset(pareto, pareto$`0.01` >= x); return(sum(df$robust==0.01 & df$sparse==TRUE & df$stable==1)/nrow(df))}
robust_M = max(pareto$`0.01`)
robust_m = min(pareto$`0.01`)
robust_domain = robust_m + (1:500)*((robust_M - robust_m)/500)
robust_images = sapply(robust_domain, robust_requirement)
plot(robust_domain, robust_images)
data_robust = data.frame(robust_domain, robust_images)
stable_M = max(pareto$avg_logit_stability)
stable_m = min(pareto$avg_logit_stability)
stable_domain = stable_m + (1:500)*((stable_M - stable_m)/500)
stable_images = sapply(stable_domain, stable_requirement)
plot(stable_domain, stable_images)
data_stable = data.frame(stable_domain, stable_images)
sparse_M = max(pareto$sparsity)
sparse_m = min(pareto$sparsity)
sparse_domain = sparse_m + (1:500)*((sparse_M - sparse_m)/500)
sparse_images = sapply(sparse_domain, sparse_requirement)
plot(sparse_domain, sparse_images)
data_sparse = data.frame(stable_domain, stable_images)
acc_M = max(pareto$avg_test_acc)
acc_m = min(pareto$avg_test_acc)
acc_domain = acc_m + (1:500)*((acc_M - acc_m)/500)
acc_images = sapply(acc_domain, robust.stable_requirement)
plot(acc_domain, acc_images)
data_acc = data.frame(acc_domain, acc_images)
#HDL
HDL_acc_images = sapply(acc_domain, HDL_acc_requirement)
data_HDL_acc = data.frame(acc_domain, HDL_acc_images)
HDL_robust_images = sapply(robust_domain, HDL_robust_requirement)
data_HDL_robust = data.frame(robust_domain, HDL_robust_images)
HDL_stable_images = sapply(stable_domain, HDL_stable_requirement)
data_HDL_stable = data.frame(stable_domain, HDL_stable_images)
HDL_sparse_images = sapply(sparse_domain, HDL_sparse_requirement)
data_HDL_sparse = data.frame(sparse_domain, HDL_sparse_images)
avg_ratio = mean(pareto$robust ==0.01)
ggplot(data =data_robust,  aes(x = robust_domain, y = robust_images)) +
xlab("Average Adversarial Accuracy") + ylab("Percentage of Networks Trained with Robustness") +
geom_ribbon(aes(ymin=avg_ratio, ymax=pmax(avg_ratio, robust_images)),fill= "#56B4E9") +
geom_ribbon(aes(ymin=pmin(avg_ratio, robust_images), ymax=avg_ratio),fill= "#FF9999") +
geom_hline(yintercept=avg_ratio) + theme_minimal()+
scale_y_continuous(labels = scales::percent_format(accuracy = 1))
robust_requirement = function(x){df = subset(pareto, pareto$`0.01` >= x); return(sum(df$robust==0.01)/nrow(df))}
robust_M = max(pareto$`0.01`)
robust_m = min(pareto$`0.01`)
robust_domain = robust_m + (1:500)*((robust_M - robust_m)/500)
robust_images = sapply(robust_domain, robust_requirement)
plot(robust_domain, robust_images)
data_robust = data.frame(robust_domain, robust_images)
avg_ratio = mean(pareto$robust == 0.01)
ggplot(data =data_robust,  aes(x = robust_domain, y = robust_images)) +
xlab("Average Adversarial Accuracy") + ylab("Percentage of Networks Trained with Robustness") +
geom_ribbon(aes(ymin=avg_ratio, ymax=pmax(avg_ratio, robust_images)),fill= "#56B4E9") +
geom_ribbon(aes(ymin=pmin(avg_ratio, robust_images), ymax=avg_ratio),fill= "#FF9999") +
geom_hline(yintercept=avg_ratio) + theme_minimal()+
scale_y_continuous(labels = scales::percent_format(accuracy = 1))
library(tidyverse)
library(ggplot2)
library(ggthemes)
library(viridis)
library(stringr)
library(rjson)
library(yaml)
library(rPref)
library(gdata)
library(plotly)
library(data.table)
data = read_csv("results_ffcifar_michael.csv", col_names = c("stable","robust","robust_test","n_experiments",
"train_size","batch_size","subset_ratio","avg_test_acc","dict_test_accs","adv_test_accs","std",
"thetas","num_training_steps","iterations","w1_stability","w2_stability","w3_stability","logit_stability",
"gini_stability","l2","l0","W1_non_zero","W2_non_zero","W3_non_zero","l1_size","l2_size","lr","adv_acc0",
"adv_acc1","adv_acc2","adv_acc3","adv_acc4","adv_acc5"))
data2 = read_csv("results_ffcifar_leonard.csv", col_names = c("stable","robust","robust_test","n_experiments",
"train_size","batch_size","subset_ratio","avg_test_acc","dict_test_accs","adv_test_accs","std",
"thetas","num_training_steps","iterations","w1_stability","w2_stability","w3_stability","logit_stability",
"gini_stability","l2","l0","W1_non_zero","W2_non_zero","W3_non_zero","l1_size","l2_size","lr","adv_acc0",
"adv_acc1","adv_acc2","adv_acc3","adv_acc4","adv_acc5"))
data3 = read_csv("results_ffcifar_kim.csv", col_names = c("stable","robust","robust_test","n_experiments",
"train_size","batch_size","subset_ratio","avg_test_acc","dict_test_accs","adv_test_accs","std",
"thetas","num_training_steps","iterations","w1_stability","w2_stability","w3_stability","logit_stability",
"gini_stability","l2","l0","W1_non_zero","W2_non_zero","W3_non_zero","l1_size","l2_size","lr","adv_acc0",
"adv_acc1","adv_acc2","adv_acc3","adv_acc4","adv_acc5"))
data4 = read_csv("results_ffcifar_ivan.csv", col_names = c("stable","robust","robust_test","n_experiments",
"train_size","batch_size","subset_ratio","avg_test_acc","dict_test_accs","adv_test_accs","std",
"thetas","num_training_steps","iterations","w1_stability","w2_stability","w3_stability","logit_stability",
"gini_stability","l2","l0","W1_non_zero","W2_non_zero","W3_non_zero","l1_size","l2_size","lr","adv_acc0",
"adv_acc1","adv_acc2","adv_acc3","adv_acc4","adv_acc5"))
data5 = read_csv("results_ffcifar_alex.csv", col_names = c("stable","robust","robust_test","n_experiments",
"train_size","batch_size","subset_ratio","avg_test_acc","dict_test_accs","adv_test_accs","std",
"thetas","num_training_steps","iterations","w1_stability","w2_stability","w3_stability","logit_stability",
"gini_stability","l2","l0","W1_non_zero","W2_non_zero","W3_non_zero","l1_size","l2_size","lr","adv_acc0",
"adv_acc1","adv_acc2","adv_acc3","adv_acc4","adv_acc5"))
data_total = rbind(rbind(rbind(rbind(data,data2),data3),data4),data5)
dataset_name = "cifar"
# the single most frankenstein line of code Michael has written in R so far
regex_result = apply(do.call(rbind,lapply(gsub("\\s+"," ",str_replace_all(data_total$adv_test_accs, "(array\\(|\\)|\n|\r\n)",  "")),
yaml.load)),c(1,2),function(x) mean(x[[1]]))
data_total = cbind(data_total,regex_result)
avg_logit_stability = sapply(strsplit(str_sub(data_total$logit_stability, start=2, end = -2),"\\s+|\n"),function(x) mean(as.numeric(x)) )
data_total = cbind(data_total,avg_logit_stability)
data_total$stable = factor(data_total$stable)
data_total$robustness = log(data_total$robust+1e-06)/max(abs(log(data_total$robust+1e-06))) + 1
data_total$lr = factor(data_total$lr)
data_total$l2_reg = log(data_total$l2+1e-06)/max(abs(log(data_total$l2+1e-06))) + 1
data_total$sparsity = (data_total$W1_non_zero +  data_total$W2_non_zero + data_total$W3_non_zero) / 3
data_total$l0_reg = log(data_total$l0+1e-06)/max(abs(log(data_total$l0+1e-06))) + 1
#Find points in the Pareto Frontier
data_total$ID <- seq.int(nrow(data_total))
data_total$sparse <- as.factor(data_total$l0_reg != 0)
pareto <- psel(data_total, high(avg_test_acc) * high(`0.01`)  * low(avg_logit_stability) * low(sparsity))
data_total$Pareto <- (data_total$ID %in% pareto$ID)
data_total$Pareto = as.factor(data_total$Pareto)
library(tidyverse)
library(ggplot2)
library(ggthemes)
library(viridis)
library(stringr)
library(rjson)
library(yaml)
library(rPref)
library(gdata)
library(plotly)
library(data.table)
data_total = read_csv("results_ffuci32.csv", col_names = c("stable","robust","robust_test","n_experiments",
"train_size","batch_size","subset_ratio","avg_test_acc","dict_test_accs","adv_test_accs","std",
"thetas","num_training_steps","iterations","w1_stability","w2_stability","w3_stability","logit_stability",
"gini_stability","l2","l0","W1_non_zero","W2_non_zero","W3_non_zero","l1_size","l2_size","lr","adv_acc0",
"adv_acc1","adv_acc2","adv_acc3","adv_acc4","adv_acc5"))
dataset_name = "uci32"
# the single most frankenstein line of code Michael has written in R so far
regex_result = apply(do.call(rbind,lapply(gsub("\\s+"," ",str_replace_all(data_total$adv_test_accs, "(array\\(|\\)|\n|\r\n)",  "")),
yaml.load)),c(1,2),function(x) mean(x[[1]]))
data_total = cbind(data_total,regex_result)
avg_logit_stability = sapply(strsplit(str_sub(data_total$logit_stability, start=2, end = -2),"\\s+|\n"),function(x) mean(as.numeric(x)) )
data_total = cbind(data_total,avg_logit_stability)
data_total$stable = factor(data_total$stable)
data_total$robustness = log(data_total$robust+1e-06)/max(abs(log(data_total$robust+1e-06))) + 1
data_total$lr = factor(data_total$lr)
data_total$l2_reg = log(data_total$l2+1e-06)/max(abs(log(data_total$l2+1e-06))) + 1
data_total$sparsity = (data_total$W1_non_zero +  data_total$W2_non_zero + data_total$W3_non_zero) / 3
data_total$l0_reg = log(data_total$l0+1e-06)/max(abs(log(data_total$l0+1e-06))) + 1
#Find points in the Pareto Frontier
data_total$ID <- seq.int(nrow(data_total))
data_total$sparse <- as.factor(data_total$l0_reg != 0)
pareto <- psel(data_total, high(avg_test_acc) * high(`1e-04`)  * low(avg_logit_stability) * low(sparsity))
data_total$Pareto <- (data_total$ID %in% pareto$ID)
data_total$Pareto = as.factor(data_total$Pareto)
pareto[which.max(pareto$avg_test_acc), ]
robust_requirement = function(x){df = subset(pareto, pareto$`0.001` >= x); return(sum(df$robust>0)/nrow(df))}
sparse_requirement = function(x){df = subset(pareto, pareto$sparsity <= x); return(sum(df$sparse==TRUE)/nrow(df))}
stable_requirement = function(x){df = subset(pareto, pareto$avg_logit_stability <= x); return(sum(df$stable==1)/nrow(df))}
robust.stable_requirement = function(x){df = subset(pareto, pareto$avg_test_acc >= x); return(sum(df$robust>0 & df$sparse==FALSE & df$stable==1)/nrow(df))}
HDL_acc_requirement = function(x){df = subset(pareto, pareto$avg_test_acc >= x); return(sum(df$robust>0 & df$sparse==TRUE & df$stable==1)/nrow(df))}
HDL_sparse_requirement = function(x){df = subset(pareto, pareto$sparsity <= x); return(sum(df$robust>0 & df$sparse==TRUE & df$stable==1)/nrow(df))}
HDL_stable_requirement = function(x){df = subset(pareto, pareto$avg_logit_stability <= x); return(sum(df$robust>0 & df$sparse==TRUE & df$stable==1)/nrow(df))}
HDL_robust_requirement = function(x){df = subset(pareto, pareto$`0.001` >= x); return(sum(df$robust>0 & df$sparse==TRUE & df$stable==1)/nrow(df))}
robust_M = max(pareto$`0.001`)
robust_m = min(pareto$`0.001`)
robust_domain = robust_m + (1:500)*((robust_M - robust_m)/500)
robust_images = sapply(robust_domain, robust_requirement)
plot(robust_domain, robust_images)
data_robust = data.frame(robust_domain, robust_images)
stable_M = max(pareto$avg_logit_stability)
stable_m = min(pareto$avg_logit_stability)
stable_domain = stable_m + (1:500)*((stable_M - stable_m)/500)
stable_images = sapply(stable_domain, stable_requirement)
plot(stable_domain, stable_images)
data_stable = data.frame(stable_domain, stable_images)
sparse_M = max(pareto$sparsity)
sparse_m = min(pareto$sparsity)
sparse_domain = sparse_m + (1:500)*((sparse_M - sparse_m)/500)
sparse_images = sapply(sparse_domain, sparse_requirement)
plot(sparse_domain, sparse_images)
data_sparse = data.frame(stable_domain, stable_images)
acc_M = max(pareto$avg_test_acc)
acc_m = min(pareto$avg_test_acc)
acc_domain = acc_m + (1:500)*((acc_M - acc_m)/500)
acc_images = sapply(acc_domain, robust.stable_requirement)
plot(acc_domain, acc_images)
data_acc = data.frame(acc_domain, acc_images)
#HDL
HDL_acc_images = sapply(acc_domain, HDL_acc_requirement)
data_HDL_acc = data.frame(acc_domain, HDL_acc_images)
HDL_robust_images = sapply(robust_domain, HDL_robust_requirement)
data_HDL_robust = data.frame(robust_domain, HDL_robust_images)
HDL_stable_images = sapply(stable_domain, HDL_stable_requirement)
data_HDL_stable = data.frame(stable_domain, HDL_stable_images)
HDL_sparse_images = sapply(sparse_domain, HDL_sparse_requirement)
data_HDL_sparse = data.frame(sparse_domain, HDL_sparse_images)
avg_ratio = mean(pareto$robust >0)
ggplot(data =data_robust,  aes(x = robust_domain, y = robust_images)) +
xlab("Average Adversarial Accuracy") + ylab("Percentage of Networks Trained with Robustness") +
geom_ribbon(aes(ymin=avg_ratio, ymax=pmax(avg_ratio, robust_images)),fill= "#56B4E9") +
geom_ribbon(aes(ymin=pmin(avg_ratio, robust_images), ymax=avg_ratio),fill= "#FF9999") +
geom_hline(yintercept=avg_ratio) + theme_minimal()+
scale_y_continuous(labels = scales::percent_format(accuracy = 1))
ggsave(paste0(dataset_name,"Percentage_Robust_Networks_.png"))
avg_ratio = mean(pareto$stable ==1)
ggplot(data =data_stable,  aes(x = stable_domain, y = stable_images)) +
xlab("Average Logit Stability") + ylab("Percentage of Networks Trained with Stability") +
geom_ribbon(aes(ymin=avg_ratio, ymax=pmax(avg_ratio, stable_images)),fill= "#56B4E9") +
geom_ribbon(aes(ymin=pmin(avg_ratio,stable_images), ymax=avg_ratio),fill= "#FF9999") +
geom_hline(yintercept=avg_ratio) + theme_minimal()+
scale_y_continuous(labels = scales::percent_format(accuracy = 1))
ggsave(paste0(dataset_name,"Percentage_Stable_Networks_.png"))
avg_ratio = mean(pareto$sparse == TRUE)
ggplot(data =data_sparse,  aes(x = sparse_domain, y = sparse_images)) +
xlab("Percentage of Non-zero Weights") + ylab("Percentage of Networks Trained with Sparsity") +
geom_ribbon(aes(ymin=avg_ratio, ymax=pmax(avg_ratio, sparse_images)),fill= "#56B4E9") +
geom_ribbon(aes(ymin=pmin(avg_ratio,sparse_images), ymax=avg_ratio),fill= "#FF9999") +
geom_hline(yintercept=avg_ratio) + theme_minimal()+
scale_y_continuous(labels = scales::percent_format(accuracy = 1))
ggsave(paste0(dataset_name,"Percentage_Sparse_Networks_.png"))
avg_ratio = mean(pareto$robust>0 & pareto$sparse==FALSE & pareto$stable==1)
ggplot(data = data_acc,  aes(x = acc_domain, y = acc_images)) +
xlab("Average Test Accuracy") + ylab("Percentage of Networks Trained with Robustness And Stability") +
geom_ribbon(aes(ymin=avg_ratio, ymax=pmax(avg_ratio, acc_images)),fill= "#56B4E9") +
geom_ribbon(aes(ymin=pmin(avg_ratio, acc_images), ymax=avg_ratio),fill= "#FF9999") +
geom_hline(yintercept=avg_ratio) + theme_minimal()+
scale_y_continuous(labels = scales::percent_format(accuracy = 1))
avg_ratio = mean(pareto$robust>0 & pareto$sparse==TRUE & pareto$stable==1)
ggplot(data = data_HDL_acc,  aes(x = acc_domain, y =HDL_acc_images)) +
xlab("Average Test Accuracy") + ylab("Percentage of  Networks Trained with HDL") +
geom_ribbon(aes(ymin=avg_ratio, ymax=pmax(avg_ratio, HDL_acc_images)),fill= "#56B4E9") +
geom_ribbon(aes(ymin=pmin(avg_ratio, HDL_acc_images), ymax=avg_ratio),fill= "#FF9999") +
geom_hline(yintercept=avg_ratio) + theme_minimal()+
scale_y_continuous(labels = scales::percent_format(accuracy = 1))
ggsave(paste0(dataset_name,"Percentage_HDL_Networks_acc.png"))
avg_ratio = mean(pareto$robust>0 & pareto$sparse==TRUE & pareto$stable==1)
ggplot(data = data_HDL_robust,  aes(x = robust_domain, y =HDL_robust_images)) +
xlab("Average Adversarial Accuracy") + ylab("Percentage of Networks Trained with HDL") +
geom_ribbon(aes(ymin=avg_ratio, ymax=pmax(avg_ratio, HDL_robust_images)),fill= "#56B4E9") +
geom_ribbon(aes(ymin=pmin(avg_ratio, HDL_robust_images), ymax=avg_ratio),fill= "#FF9999") +
geom_hline(yintercept=avg_ratio) + theme_minimal()+
scale_y_continuous(labels = scales::percent_format(accuracy = 1))
robust_requirement = function(x){df = subset(pareto, pareto$`0.01` >= x); return(sum(df$robust>0)/nrow(df))}
sparse_requirement = function(x){df = subset(pareto, pareto$sparsity <= x); return(sum(df$sparse==TRUE)/nrow(df))}
stable_requirement = function(x){df = subset(pareto, pareto$avg_logit_stability <= x); return(sum(df$stable==1)/nrow(df))}
robust.stable_requirement = function(x){df = subset(pareto, pareto$avg_test_acc >= x); return(sum(df$robust>0 & df$sparse==FALSE & df$stable==1)/nrow(df))}
HDL_acc_requirement = function(x){df = subset(pareto, pareto$avg_test_acc >= x); return(sum(df$robust>0 & df$sparse==TRUE & df$stable==1)/nrow(df))}
HDL_sparse_requirement = function(x){df = subset(pareto, pareto$sparsity <= x); return(sum(df$robust>0 & df$sparse==TRUE & df$stable==1)/nrow(df))}
HDL_stable_requirement = function(x){df = subset(pareto, pareto$avg_logit_stability <= x); return(sum(df$robust>0 & df$sparse==TRUE & df$stable==1)/nrow(df))}
HDL_robust_requirement = function(x){df = subset(pareto, pareto$`0.01` >= x); return(sum(df$robust>0 & df$sparse==TRUE & df$stable==1)/nrow(df))}
robust_M = max(pareto$`0.01`)
robust_m = min(pareto$`0.01`)
robust_domain = robust_m + (1:500)*((robust_M - robust_m)/500)
robust_images = sapply(robust_domain, robust_requirement)
plot(robust_domain, robust_images)
data_robust = data.frame(robust_domain, robust_images)
stable_M = max(pareto$avg_logit_stability)
stable_m = min(pareto$avg_logit_stability)
stable_domain = stable_m + (1:500)*((stable_M - stable_m)/500)
stable_images = sapply(stable_domain, stable_requirement)
plot(stable_domain, stable_images)
data_stable = data.frame(stable_domain, stable_images)
sparse_M = max(pareto$sparsity)
sparse_m = min(pareto$sparsity)
sparse_domain = sparse_m + (1:500)*((sparse_M - sparse_m)/500)
sparse_images = sapply(sparse_domain, sparse_requirement)
plot(sparse_domain, sparse_images)
data_sparse = data.frame(stable_domain, stable_images)
acc_M = max(pareto$avg_test_acc)
acc_m = min(pareto$avg_test_acc)
acc_domain = acc_m + (1:500)*((acc_M - acc_m)/500)
acc_images = sapply(acc_domain, robust.stable_requirement)
plot(acc_domain, acc_images)
data_acc = data.frame(acc_domain, acc_images)
#HDL
HDL_acc_images = sapply(acc_domain, HDL_acc_requirement)
data_HDL_acc = data.frame(acc_domain, HDL_acc_images)
HDL_robust_images = sapply(robust_domain, HDL_robust_requirement)
data_HDL_robust = data.frame(robust_domain, HDL_robust_images)
HDL_stable_images = sapply(stable_domain, HDL_stable_requirement)
data_HDL_stable = data.frame(stable_domain, HDL_stable_images)
HDL_sparse_images = sapply(sparse_domain, HDL_sparse_requirement)
data_HDL_sparse = data.frame(sparse_domain, HDL_sparse_images)
avg_ratio = mean(pareto$robust >0)
ggplot(data =data_robust,  aes(x = robust_domain, y = robust_images)) +
xlab("Average Adversarial Accuracy") + ylab("Percentage of Networks Trained with Robustness") +
geom_ribbon(aes(ymin=avg_ratio, ymax=pmax(avg_ratio, robust_images)),fill= "#56B4E9") +
geom_ribbon(aes(ymin=pmin(avg_ratio, robust_images), ymax=avg_ratio),fill= "#FF9999") +
geom_hline(yintercept=avg_ratio) + theme_minimal()+
scale_y_continuous(labels = scales::percent_format(accuracy = 1))
avg_ratio = mean(pareto$robust>0 & pareto$sparse==TRUE & pareto$stable==1)
ggplot(data = data_HDL_robust,  aes(x = robust_domain, y =HDL_robust_images)) +
xlab("Average Adversarial Accuracy") + ylab("Percentage of Networks Trained with HDL") +
geom_ribbon(aes(ymin=avg_ratio, ymax=pmax(avg_ratio, HDL_robust_images)),fill= "#56B4E9") +
geom_ribbon(aes(ymin=pmin(avg_ratio, HDL_robust_images), ymax=avg_ratio),fill= "#FF9999") +
geom_hline(yintercept=avg_ratio) + theme_minimal()+
scale_y_continuous(labels = scales::percent_format(accuracy = 1))
robust_requirement = function(x){df = subset(pareto, pareto$`0.01` >= x); return(sum(df$robust>0)/nrow(df))}
sparse_requirement = function(x){df = subset(pareto, pareto$sparsity <= x); return(sum(df$sparse==TRUE)/nrow(df))}
stable_requirement = function(x){df = subset(pareto, pareto$avg_logit_stability <= x); return(sum(df$stable==1)/nrow(df))}
robust.stable_requirement = function(x){df = subset(pareto, pareto$avg_test_acc >= x); return(sum(df$robust>0 & df$sparse==FALSE & df$stable==1)/nrow(df))}
HDL_acc_requirement = function(x){df = subset(pareto, pareto$avg_test_acc >= x); return(sum(df$robust>0 & df$sparse==TRUE & df$stable==1)/nrow(df))}
HDL_sparse_requirement = function(x){df = subset(pareto, pareto$sparsity <= x); return(sum(df$robust>0 & df$sparse==TRUE & df$stable==1)/nrow(df))}
HDL_stable_requirement = function(x){df = subset(pareto, pareto$avg_logit_stability <= x); return(sum(df$robust>0 & df$sparse==TRUE & df$stable==1)/nrow(df))}
HDL_robust_requirement = function(x){df = subset(pareto, pareto$`0.01` >= x); return(sum(df$robust>0 & df$sparse==TRUE & df$stable==1)/nrow(df))}
robust_M = max(pareto$`0.01`)
robust_m = min(pareto$`0.01`)
robust_domain = robust_m + (1:500)*((robust_M - robust_m)/500)
robust_images = sapply(robust_domain, robust_requirement)
plot(robust_domain, robust_images)
data_robust = data.frame(robust_domain, robust_images)
stable_M = max(pareto$avg_logit_stability)
stable_m = min(pareto$avg_logit_stability)
stable_domain = stable_m + (1:500)*((stable_M - stable_m)/500)
stable_images = sapply(stable_domain, stable_requirement)
plot(stable_domain, stable_images)
data_stable = data.frame(stable_domain, stable_images)
sparse_M = max(pareto$sparsity)
sparse_m = min(pareto$sparsity)
sparse_domain = sparse_m + (1:500)*((sparse_M - sparse_m)/500)
sparse_images = sapply(sparse_domain, sparse_requirement)
plot(sparse_domain, sparse_images)
data_sparse = data.frame(stable_domain, stable_images)
acc_M = max(pareto$avg_test_acc)
acc_m = min(pareto$avg_test_acc)
acc_domain = acc_m + (1:500)*((acc_M - acc_m)/500)
acc_images = sapply(acc_domain, robust.stable_requirement)
plot(acc_domain, acc_images)
data_acc = data.frame(acc_domain, acc_images)
#HDL
HDL_acc_images = sapply(acc_domain, HDL_acc_requirement)
data_HDL_acc = data.frame(acc_domain, HDL_acc_images)
HDL_robust_images = sapply(robust_domain, HDL_robust_requirement)
data_HDL_robust = data.frame(robust_domain, HDL_robust_images)
HDL_stable_images = sapply(stable_domain, HDL_stable_requirement)
data_HDL_stable = data.frame(stable_domain, HDL_stable_images)
HDL_sparse_images = sapply(sparse_domain, HDL_sparse_requirement)
data_HDL_sparse = data.frame(sparse_domain, HDL_sparse_images)
avg_ratio = mean(pareto$robust >0)
ggplot(data =data_robust,  aes(x = robust_domain, y = robust_images)) +
xlab("Average Adversarial Accuracy") + ylab("Percentage of Networks Trained with Robustness") +
geom_ribbon(aes(ymin=avg_ratio, ymax=pmax(avg_ratio, robust_images)),fill= "#56B4E9") +
geom_ribbon(aes(ymin=pmin(avg_ratio, robust_images), ymax=avg_ratio),fill= "#FF9999") +
geom_hline(yintercept=avg_ratio) + theme_minimal()+
scale_y_continuous(labels = scales::percent_format(accuracy = 1))
ggsave(paste0(dataset_name,"Percentage_Robust_Networks_.png"))
avg_ratio = mean(pareto$stable ==1)
ggplot(data =data_stable,  aes(x = stable_domain, y = stable_images)) +
xlab("Average Logit Stability") + ylab("Percentage of Networks Trained with Stability") +
geom_ribbon(aes(ymin=avg_ratio, ymax=pmax(avg_ratio, stable_images)),fill= "#56B4E9") +
geom_ribbon(aes(ymin=pmin(avg_ratio,stable_images), ymax=avg_ratio),fill= "#FF9999") +
geom_hline(yintercept=avg_ratio) + theme_minimal()+
scale_y_continuous(labels = scales::percent_format(accuracy = 1))
ggsave(paste0(dataset_name,"Percentage_Stable_Networks_.png"))
avg_ratio = mean(pareto$sparse == TRUE)
ggplot(data =data_sparse,  aes(x = sparse_domain, y = sparse_images)) +
xlab("Percentage of Non-zero Weights") + ylab("Percentage of Networks Trained with Sparsity") +
geom_ribbon(aes(ymin=avg_ratio, ymax=pmax(avg_ratio, sparse_images)),fill= "#56B4E9") +
geom_ribbon(aes(ymin=pmin(avg_ratio,sparse_images), ymax=avg_ratio),fill= "#FF9999") +
geom_hline(yintercept=avg_ratio) + theme_minimal()+
scale_y_continuous(labels = scales::percent_format(accuracy = 1))
ggsave(paste0(dataset_name,"Percentage_Sparse_Networks_.png"))
avg_ratio = mean(pareto$robust>0 & pareto$sparse==TRUE & pareto$stable==1)
ggplot(data = data_HDL_acc,  aes(x = acc_domain, y =HDL_acc_images)) +
xlab("Average Test Accuracy") + ylab("Percentage of  Networks Trained with HDL") +
geom_ribbon(aes(ymin=avg_ratio, ymax=pmax(avg_ratio, HDL_acc_images)),fill= "#56B4E9") +
geom_ribbon(aes(ymin=pmin(avg_ratio, HDL_acc_images), ymax=avg_ratio),fill= "#FF9999") +
geom_hline(yintercept=avg_ratio) + theme_minimal()+
scale_y_continuous(labels = scales::percent_format(accuracy = 1))
ggsave(paste0(dataset_name,"Percentage_HDL_Networks_acc.png"))
avg_ratio = mean(pareto$robust>0 & pareto$sparse==TRUE & pareto$stable==1)
ggplot(data = data_HDL_robust,  aes(x = robust_domain, y =HDL_robust_images)) +
xlab("Average Adversarial Accuracy") + ylab("Percentage of Networks Trained with HDL") +
geom_ribbon(aes(ymin=avg_ratio, ymax=pmax(avg_ratio, HDL_robust_images)),fill= "#56B4E9") +
geom_ribbon(aes(ymin=pmin(avg_ratio, HDL_robust_images), ymax=avg_ratio),fill= "#FF9999") +
geom_hline(yintercept=avg_ratio) + theme_minimal()+
scale_y_continuous(labels = scales::percent_format(accuracy = 1))
ggsave(paste0(dataset_name,"Percentage_HDL_Networks_advacc.png"))
avg_ratio = mean(pareto$robust>0 & pareto$sparse==TRUE & pareto$stable==1)
ggplot(data = data_HDL_stable,  aes(x = stable_domain, y =HDL_stable_images)) +
xlab("Average Logit Stability") + ylab("Percentage of Networks Trained with HDL") +
geom_ribbon(aes(ymin=avg_ratio, ymax=pmax(avg_ratio, HDL_stable_images)),fill= "#56B4E9") +
geom_ribbon(aes(ymin=pmin(avg_ratio, HDL_stable_images), ymax=avg_ratio),fill= "#FF9999") +
geom_hline(yintercept=avg_ratio) + theme_minimal()+
scale_y_continuous(labels = scales::percent_format(accuracy = 1))
ggsave(paste0(dataset_name,"Percentage_HDL_Networks_stable.png"))
avg_ratio = mean(pareto$robust>0 & pareto$sparse==TRUE & pareto$stable==1)
ggplot(data = data_HDL_sparse,  aes(x = sparse_domain, y =HDL_sparse_images)) +
xlab("Percentage of Non-zero Weights") + ylab("Percentage of Networks Trained with HDL") +
geom_ribbon(aes(ymin=avg_ratio, ymax=pmax(avg_ratio, HDL_sparse_images)),fill= "#56B4E9") +
geom_ribbon(aes(ymin=pmin(avg_ratio, HDL_sparse_images), ymax=avg_ratio),fill= "#FF9999") +
geom_hline(yintercept=avg_ratio) + theme_minimal()+
scale_y_continuous(labels = scales::percent_format(accuracy = 1))
ggsave(paste0(dataset_name,"Percentage_HDL_Networks_sparse.png"))
